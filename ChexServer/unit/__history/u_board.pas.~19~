unit u_board;

interface

uses
  System.SysUtils,
  System.Types,
  System.UITypes,
  FMX.Forms,
  FMX.Dialogs,
  IdBaseComponent,
  IdComponent,
  IdContext,
  IdTCPServer,
  IdTCPConnection,
  IdTCPClient,
  IdThreadComponent,
  FMX.StdCtrls,
  System.Math,
  u_pecas,
  System.Classes,
  FMX.Types,
  FMX.Controls,
  FMX.Objects,
  FMX.Layouts,
  FMX.Controls.Presentation,
  System.Math.Vectors,
  FMX.Controls3D,
  FMX.Layers3D;




type
  TUsers = class(TForm)
    StyleBook1: TStyleBook;
    Board: TImage;
    lytPrincipal: TLayout;
    Button1: TButton;
    procedure FormCreate(Sender: TObject);
    procedure IdTCPServerConnect(AContext: TIdContext);
    procedure IdTCPServerDisconnect(AContext: TIdContext);
    procedure IdTCPServerExecute(AContext: TIdContext);
    procedure IdTCPServerStatus(ASender: TObject; const AStatus: TIdStatus;const AStatusText: string);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Button1Click(Sender: TObject);

  private
    { Private declarations }
    procedure IniciarServer;
    procedure DesligarServer;
    procedure broadcastMessage(p_message : string);
    procedure Display(p_sender, p_message : string);
    function  GetNow():String;
    procedure ShowNumberOfClients(p_disconnected : Boolean=False);
  public
    { Public declarations }
    procedure EnviaPosicao;
  end;

// ... listening port
const
  GUEST_CLIENT_PORT = 20010;

const
  MAX_RECTANGLES = 32;
  RECT_WIDTH = 50;
  RECT_HEIGHT = 50;


var
  Users: TUsers;
  // ... Id TCP Server
  IdTCPServer : TIdTCPServer;

  //Indica se está segurando ou não a peça
  Grab: boolean = false;
  Offset: tpointf;
  MovingRectangle: TRectangle;
  PieceName:String;
  Pecas:TPeca;


implementation

{$R *.fmx}

procedure TUsers.EnviaPosicao;
begin
 broadcastMessage(Pecas.Tag +':'+Pecas.PosX+'|'+Pecas.PosY);
end;

procedure TUsers.broadcastMessage(p_message: string);
var
    tmpList      : TList;
    contexClient : TidContext;
    nClients     : Integer;
    i            : integer;
begin

    // ... send a message to all clients connected

    // ... get context Locklist
    tmpList  := IdTCPServer.Contexts.LockList;

    try
        i := 0;
        while ( i < tmpList.Count ) do begin
            // ... get context (thread of i-client)
            contexClient := tmpList[i];

            // ... send message to client
            contexClient.Connection.IOHandler.WriteLn(p_message);
            i := i + 1;
        end;

    finally
        // ... unlock list of clients!
        IdTCPServer.Contexts.UnlockList;
    end;
end;

procedure TUsers.Button1Click(Sender: TObject);
begin
  Pecas := TPeca.Create(lytPrincipal);
end;

procedure TUsers.DesligarServer;
begin
    // ... before stopping the server ... send 'good bye' to all clients connected
    BroadcastMessage('Goodbye Client ');

    // ... stop server!
    IdTCPServer.Active := False;

    // ... message log
    Display('SERVER', 'STOPPED!');
end;

procedure TUsers.Display(p_sender, p_message: string);
var msg:String;
begin
    // ... DISPLAY MESSAGE
    TThread.Queue(nil, procedure
                       begin
                           msg := ('[' + p_sender + '] - '
                           + getNow() + ': ' + p_message);
                       end
                 );

    // ... see doc..
    // ... TThread.Queue() causes the call specified by AMethod to
    //     be asynchronously executed using the main thread, thereby avoiding
    //     multi-thread conflicts.
end;

procedure TUsers.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  DesligarServer;
end;

procedure TUsers.FormCreate(Sender: TObject);
begin
    // ... create idTCPServer
    IdTCPServer                 := TIdTCPServer.Create(self);
    IdTCPServer.Active          := False;

    // ... set properties
    IdTCPServer.MaxConnections  := 20;

    // ... etc..

    // ... assign a new context class (if you need)
     //IdTCPServer.ContextClass    := TYourContext;

    // ... add some callback functions
    IdTCPServer.OnConnect       := IdTCPServerConnect;
    IdTCPServer.OnDisconnect    := IdTCPServerDisconnect;
    IdTCPServer.OnExecute       := IdTCPServerExecute;
    IdTCPServer.OnStatus        := IdTCPServerStatus;
    // ... etc..

    IniciarServer;
end;

function TUsers.GetNow: String;
begin
    Result := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now) + ': ';
end;


procedure TUsers.IdTCPServerConnect(AContext: TIdContext);
var
    ip          : string;
    port        : Integer;
    peerIP      : string;
    peerPort    : Integer;

    nClients    : Integer;

    msgToClient : string;
    typeClient  : string;

begin
    // ... OnConnect is a TIdServerThreadEvent property that represents the event
    //     handler signalled when a new client connection is connected to the server.

    // ... Use OnConnect to perform actions for the client after it is connected
    //     and prior to execution in the OnExecute event handler.

    // ... see indy doc:
    //     http://www.indyproject.org/sockets/docs/index.en.aspx

    // ... getting IP address and Port of Client that connected
    ip        := AContext.Binding.IP;
    port      := AContext.Binding.Port;
    peerIP    := AContext.Binding.PeerIP;
    peerPort  := AContext.Binding.PeerPort;

    // ... message log
    Display('SERVER', 'Client Connected!');
    Display('SERVER', 'Port=' + IntToStr(Port)
                      + ' '   + '(PeerIP=' + PeerIP
                      + ' - ' + 'PeerPort=' + IntToStr(PeerPort) + ')'
           );

    // ... display the number of clients connected
    ShowNumberOfClients();

    // ... CLIENT CONNECTED:
    case Port of
    GUEST_CLIENT_PORT   : begin
                            // ... GUEST CLIENTS
                            typeClient := 'GUEST';
                          end;
                          // ...
    end;

    // ... send the Welcome message to Client connected
    //msgToClient := 'Welcome ' + typeClient + ' ' + 'Client :)';
    //AContext.Connection.IOHandler.WriteLn( msgToClient );


end;
procedure TUsers.IdTCPServerDisconnect(AContext: TIdContext);
var
    ip          : string;
    port        : Integer;
    peerIP      : string;
    peerPort    : Integer;

    nClients    : Integer;
begin

    // ... getting IP address and Port of Client that connected
    ip        := AContext.Binding.IP;
    port      := AContext.Binding.Port;
    peerIP    := AContext.Binding.PeerIP;
    peerPort  := AContext.Binding.PeerPort;

    // ... message log
    //Display('SERVER', 'Client Disconnected! Peer=' + PeerIP + ':' + IntToStr(PeerPort));

    // ... display the number of clients connected
    ShowNumberOfClients(true);
end;

procedure TUsers.IdTCPServerExecute(AContext: TIdContext);
var
    Port          : Integer;
    PeerPort      : Integer;
    PeerIP        : string;

    msgFromClient : string;
    msgToClient   : string;
begin

    // ... OnExecute is a TIdServerThreadEvents event handler used to execute
    //     the task for a client connection to the server.

    // ... here you can check connection status and buffering before reading
    //     messages from client

    // ... see doc:
    // ... AContext.Connection.IOHandler.InputBufferIsEmpty
    // ... AContext.Connection.IOHandler.CheckForDataOnSource(<milliseconds>);
    //     (milliseconds to wait for the connection to become readable)
    // ... AContext.Connection.IOHandler.CheckForDisconnect;

    // ... received a message from the client

    // ... get message from client
    msgFromClient := AContext.Connection.IOHandler.ReadLn;

    // ... getting IP address, Port and PeerPort from Client that connected
    peerIP    := AContext.Binding.PeerIP;
    peerPort  := AContext.Binding.PeerPort;

    Pecas.MovePiece(msgFromClient);
    lytPrincipal.Repaint;

    // ... message log
    //*****Display('CLIENT', '(Peer=' + PeerIP + ':' + IntToStr(PeerPort) + ') ' + msgFromClient);
    // ...

    // ... process message from Client

    // ...

    // ... send response to Client
    //AContext.Connection.IOHandler.WriteLn('... message sent from server :)');



end;
procedure TUsers.IdTCPServerStatus(ASender: TObject; const AStatus: TIdStatus;
  const AStatusText: string);
begin
    // ... OnStatus is a TIdStatusEvent property that represents the event handler
    //     triggered when the current connection state is changed...

    // ... message log
    Display('SERVER', AStatusText);
end;

procedure TUsers.IniciarServer;
begin
    // ... START SERVER:

    // ... clear the Bindings property ( ... Socket Handles )
    IdTCPServer.Bindings.Clear;
    // ... Bindings is a property of class: TIdSocketHandles;

    // ... add listening ports:

    // ... add a port for connections from guest clients.
    IdTCPServer.Bindings.Add.Port := GUEST_CLIENT_PORT;
    // ... etc..

    // ... ok, Active the Server!
    IdTCPServer.Active   := True;

end;



procedure TUsers.ShowNumberOfClients(p_disconnected: Boolean);
var
    nClients : integer;
begin

    try
        // ... get number of clients connected
        nClients := IdTCPServer.Contexts.LockList.Count;
    finally
        IdTCPServer.Contexts.UnlockList;
    end;

    // ... client disconnected?
    if p_disconnected then dec(nClients);

    // ... display
    TThread.Queue(nil, procedure
                       begin
                          //clients_connected.Caption := IntToStr(nClients);
                       end
                 );
end;
end.
